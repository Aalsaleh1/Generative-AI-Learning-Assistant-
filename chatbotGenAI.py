# -*- coding: utf-8 -*-
"""ChatBot day 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11E_V_mMnO7r9U08Nct9GAICGN1YVsYrr
"""

pip install openai gradio

import os
from google.colab import userdata
from openai import OpenAI
OPENAI_API_KEY = userdata.get('openaikey')


if OPENAI_API_KEY:
    print(f"OpenAI API Key exists and begins {OPENAI_API_KEY[:12]}")
else:
    print("OpenAI API Key not set")

import os
import sys
import openai
import gradio as gr


def load_api_key():

    """Load and validate the OpenAI API key from environment."""
    # This function now correctly reads from the environment variable
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        sys.exit("Error: The OPENAI_API_KEY environment variable is not set.")
    # Assign the API key to openai.api_key
    OPENAI_API_KEY = api_key

# ====== Configuration ======
SYSTEM_PROMPT = ("""
Role
 Act as a Generative AI Learning Assistant who teaches students complex GenAI and AI concepts in an easy-to-understand yet technically accurate way. You communicate like an engaging instructor — clear, friendly, and confident. Your explanations always balance technical depth with relatable analogies.
Task
Begin with a short overview of the concept in simple language (3–4 sentences).


Explain the key technical idea behind it with correct terminology but simplified structure.


Provide at least one real-world example or analogy to make it relatable.


Where relevant, contrast it with older AI approaches (e.g., rule-based systems vs LLMs).


End with 2–3 practical use cases where the concept applies in business or daily life.


Context
The audience is students and professionals new to Generative AI, with limited coding experience.


The goal is to make them job-ready by building both conceptual understanding and applied intuition.


Explanations should assume minimal prior knowledge but maintain correctness.


Use examples relevant to current GenAI tools (OpenAI, Gemini, Claude, Mistral, Falcon, and Humane LLM).


Keep tone conversational, encouraging, and inclusive.


Reasoning
Before answering, outline your internal reasoning:


What is the essence of this concept?


What’s the simplest accurate way to explain it?


Which analogy would best help a beginner connect to it?


Then deliver the refined, structured response.


Output Format
 Return your final answer in this structure:
### Concept Overview
[Explain simply]

### Technical Insight
[Provide core idea with light technical depth]

### Example or Analogy
[Relatable real-world example]

### Real-World Applications
[2–3 bullet points showing where it’s used]

Stop Conditions
Stop once the explanation covers the concept, its example, and its applications clearly.


Do not generate extra definitions or unrelated facts.


End when the learner could re-explain the idea confidently in their own words.

Language:
- English"""
)
MODEL = "gpt-4o-mini"  # or 'gpt-4o-mini'
TEMPERATURE = 0.7
MAX_TOKENS = 400


def build_messages(history, user_input):
    """Assemble the messages payload for the ChatCompletion API."""
    return (
        [{"role": "system", "content": SYSTEM_PROMPT}]
        + history
        + [{"role": "user", "content": user_input}]
    )


def get_hr_assistant_reply(history, user_input):
    """Send request to OpenAI and return the HR assistant's reply or an error message."""
    messages = build_messages(history, user_input)
    try:
        # Corrected function call for ChatCompletion API
        response = openai.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=TEMPERATURE,
            max_tokens=MAX_TOKENS,
        )
        # Corrected way to access the response content
        return response.choices[0].message.content.strip()
    except Exception as err: # Catch a broader exception for now to see specific API errors
        return f"⚠️ API Error: {err}"


def respond(user_input, chat_history, message_history):
    """Handle user input, maintain chat & message histories, and return updates."""
    chat_history = chat_history or []
    message_history = message_history or []
    # Get assistant reply
    reply = get_hr_assistant_reply(message_history, user_input)
    # Update histories
    message_history.extend([
        {"role": "user", "content": user_input},
        {"role": "assistant", "content": reply}
    ])
    chat_history.append((user_input, reply))
    # Gradio requires returning updated history and state
    return chat_history, message_history


def launch_ui():
    """Initialize API key and launch the Gradio UI."""
    # Set the environment variable here before calling load_api_key
    # Assumes OPENAI_API_KEY has been defined in a previous cell
    if 'OPENAI_API_KEY' in globals():
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    else:
        sys.exit("Error: OPENAI_API_KEY Python variable is not set.")

    load_api_key() # Now this function will find the environment variable

with gr.Blocks() as demo:
    gr.Markdown("## atomcamp Gen AI tutor") # main title
    chatbot = gr.Chatbot(label="TA")
    state = gr.State([])  # holds message history for API context
    txt = gr.Textbox(
        show_label=False,
        placeholder="What do u want to learn today...",
        lines=2
    )
    submit_btn = gr.Button("Please help")  # Added submit button

    # Submit button triggers the respond function
    submit_btn.click(respond, [txt, chatbot, state], [chatbot, state])
    submit_btn.click(lambda: "", outputs=txt)  # Clear the textbox

    # Also retain the ability to press Enter to submit
    txt.submit(respond, [txt, chatbot, state], [chatbot, state])
    txt.submit(lambda: "", outputs=txt)



    demo.launch()


if __name__ == "__main__":
    # Make sure the pip install cell and API key setting cell have been run
    # before running this cell that calls launch_ui()
    launch_ui()

